# Load powercat function from cradle
IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1')
# Cradle
## 'powershell iex (New-Object Net.WebClient).DownloadString('$URL/file.txt');start-wank
#=================================================#
# Oh-My-PoSh + themes
# 	winget install JanDeDobbeleer.OhMyPosh -s winget
# 	ThemeDIR=C:\Users\calvin\AppData\Local\oh-my-posh
# 	oh-my-posh init pwsh --config C:\Users\calvin\AppData\Local\oh-my-posh/darkblood.omp.json | Invoke-Expression
# 	oh-my-posh font install=install shit
oh-my-posh init pwsh --config C:\Users\calvin\AppData\Local\oh-my-posh/darkblood.omp.json | Invoke-Expression
# Step 1 - standard + small hacks
# installed oh-my-posh, config'd above
#=================================================#
# Step 2 - bash history search & autocomplete
## up&down arrow for history search
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward
### menu complete using TAB instead of CTRL+SPACE
Set-PSReadlineKeyHandler -Chord Tab -Function MenuComplete
#=================================================#
# Step 3: Autocomplete
## PowerShell parameter completion shim for the dotnet CLI
Register-ArgumentCompleter -Native -CommandName dotnet -ScriptBlock {
     param($commandName, $wordToComplete, $cursorPosition)
         dotnet complete --position $cursorPosition "$wordToComplete" | ForEach-Object {
            [System.Management.Automation.CompletionResult]::new($_, $_, 'ParameterValue', $_)
         }
 }
#=================================================#
# SUDO functions
function fcuk {
    $cmd = (Get-History ((Get-History).Count))[0].CommandLine
    Write-Host "Running $cmd in $PWD"
    start-process pwsh -verb runas -WorkingDirectory $PWD -ArgumentList "-NoExit -Command pushd $PWD; Write-host 'cmd to run: $cmd'; $cmd"
}

function sudo {
    if ($first -eq '!!') {
        fcuk;
    }
    else {
        $file=$args[0];
        [string]$arguments = "";
        if ($args.Count -gt 1) {
            $c = $args.Count - 1;
            [string]$arguments = $args[1..$c]
        }
        Write-Host "file = $file args = $arguments";
        start-process $file -verb runas -WorkingDirectory $PWD -ArgumentList $arguments;
    }
}
#=================================================#
clear

