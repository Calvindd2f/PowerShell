# Function for Date User is Disabled
Function script:DateEntry() {
	$Date = [string](Get-Date).Year + '-' + (Get-Date).Month + '-' + (Get-Date).Day
	return ($Date)
}

# Function to generate a new random password
    function New-Password {
    param(
        [Parameter()]
        [int]$MinPasswordLength = 15,
        [Parameter()]
        [int]$MaxPasswordLength = 24,
        [Parameter()]
        [int]$MinSpecialCharacters = 1,
        [Parameter()]
        [int]$MaxSpecialCharacters = 5
           )

    Add-Type -AssemblyName 'System.Web'
    $length = Get-Random -Minimum $MinPasswordLength -Maximum $MaxPasswordLength
    $special = Get-Random -Minimum $MinSpecialCharacters -Maximum $MaxSpecialCharacters
    $password = [System.Web.Security.Membership]::GeneratePassword($length,$special)
    }

   # Module
ipmo ActiveDirectory


   # section 1#
$DC=$env:COMPUTERNAME
$OU_Disabled = 'Disabled Users'                 
   # Check for Disabled Users OU.
$OU_Disabled = ("Name -like '{0}'" -f ($OU_Disabled))
if([bool] (Get-ADOrganizationalUnit -Filter * | Where-Object {$_.Name -eq $OU_Disabled} )) {
  Write-Verbose -Message 'true'
} else {
  New-ADOrganizationalUnit -Name $OU_Disabled -DisplayName $OU_Disabled -Server $DC }


   #Part 2#
$Disabled_Move_OU="Get-ADUser -Filter * -Property Enabled | Where {$_.Enabled -like 'False'} | Select-Object -Property SamAccountName"
ForEach( $Disabled_Move_OU in $Disabled_Move_OU) {
 Move-ADObject -TargetServer $DC -TargetPath OU=$OU_Disabled}
   # Move Disabled Users who are not in OU; to Disabled Users OU


   #Part 3#
$BaseSearchOU='OU=Users'
$DestinationOU='OU=Disabled Users'
$Users=Search-ADAccount -UsersOnly -SearchBase $BaseSearchOU
   # Index's Accounts to figure out who is disabled, who is not.
ForEach ($user in $Users) 
    {
        $Status=Get-ADUser $user -Properties *
        $SAM=$user.SamAccountName
   # Verifies Users AD Account was disabled
            If ($Status.Enabled -eq $True)
                {
                Disable-ADAccount -Identity $user
                }
   # Throw Error if Disabling account fucks up
If($Status.enable){
               Write-Verbose 'fuck' {
               Disable-ADAccount -Identity $user
                }
   # If nothing else shits the bed move on to reset password
  Else {
    $newpass = New-Password
  }
   # Uses the New-Password function to generate a secure password and store in a variable
   # Set AD User password to password generated by the New-Password Function.
  Set-ADAccountPassword -Identity $user -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $newpass -Force)
   # Moves wagie lusr to the Disabled / Handicap OU
  Move-ADObject -Identity $user -TargetPath $DestinationOU
   # Clear AD Group Memberships for user
  Get-ADPrincipalGroupMembership $user| ForEach-Object {
  Remove-ADGroupMember $_ -Members $user -Confirm:$false
  }
   # Set user description to "Disabled YYYY-MM-DD"
  $date = DateEntry
  $Disabled = 'Disabled - '
  Set-ADUser $user -Add @{Description=$Disabled+$date}
   # Check for AD Sync Services
   # Outputs the results to the PowerShell terminal     
                    Write-Verbose -Message "$SAM was moved to $DestinationOU is the new password of $newpass"                   
                }
    }
# SIG # Begin signature block
# MIIDzwYJKoZIhvcNAQcCoIIDwDCCA7wCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUQilHlcLww9sjIQlmrGrcxnbN
# 7LqgggHzMIIB7zCCAVigAwIBAgIQQLsuy1Eeqa9F2YvMGQm6+DANBgkqhkiG9w0B
# AQUFADASMRAwDgYDVQQDDAdDYmVyZ2luMB4XDTIyMDgxNzA5MDk1N1oXDTI2MDgx
# NzAwMDAwMFowEjEQMA4GA1UEAwwHQ2JlcmdpbjCBnzANBgkqhkiG9w0BAQEFAAOB
# jQAwgYkCgYEArZy4JY2iShwktEEtlk4AWzu7Kj5FpAwN2fX6PnTBf/kpxxagOSRz
# IJEEAmQpdbM/GTAMXBXS18tk+BqVYDJuj6D53Ostgi3DWtijwr5PDa+HZonlG5lf
# RI+uP0qil06c1iUGYR6tqHk13QrUZPhkXTVohJKC/TuNeaoBVwM4q3UCAwEAAaNG
# MEQwEwYDVR0lBAwwCgYIKwYBBQUHAwMwHQYDVR0OBBYEFO9SXmXijNR5vsqLd0aV
# p/Mru4v1MA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQUFAAOBgQBBcnaUMzic
# 4Tu1v1GHrRGgPtFOUn5GMuemtPtPwCUhUlmEb+lE+qvpwEFRep98GD1wOm95omWy
# JiDPBXNZOT7sI+TI4VJ5TaneUYh+Py6lwyMQpqHAE9bdcMO8pFv90nScnKhcKut5
# ZypLnufxGNwEpvdMIXrz+37LuSvQd8DBMzGCAUYwggFCAgEBMCYwEjEQMA4GA1UE
# AwwHQ2JlcmdpbgIQQLsuy1Eeqa9F2YvMGQm6+DAJBgUrDgMCGgUAoHgwGAYKKwYB
# BAGCNwIBDDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAc
# BgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQUwsVk
# VFSvy17rf4FiKs6shJINQ1owDQYJKoZIhvcNAQEBBQAEgYA0oguX8/hlwQDL+uFg
# qhhg2z+KIUz64/b4ghMEWBs/alqCUsEqfsENLU00JKlK1vn/H10xf8svNash5SbE
# Zyo7ItaSKeuoa6i0vy+gOjK2qAa3gnCHWeMjXZOCm74n5jqYRR4yBMStpDWAbWii
# r7rXttLOhVeV94OLqcvFfh55aA==
# SIG # End signature block
